{"version":3,"sources":["utils/commonFunctions.js","reportWebVitals.js","index.js"],"names":["retry","fn","retriesLeft","interval","Promise","resolve","reject","then","catch","error","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","App","lazy","rootElement","document","getElementById","main","render","fallback","window","requestIdleCallback","IntersectionObserver","src","done","js","createElement","onload","onerror","Error","head","appendChild","loadScript"],"mappings":"iHAAO,SAASA,EAAMC,GAAuC,IAAnCC,EAAkC,uDAApB,EAAGC,EAAiB,uDAAN,IAClD,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBL,IACKM,KAAKF,GACLG,OAAM,SAACC,GACJC,YAAW,WACa,IAAhBR,EAMJF,EAAMC,EAAIC,EAAc,EAAGC,GAAUI,KAAKF,EAASC,GAJ/CA,EAAOG,KAKZN,SAbnB,mC,uECYeQ,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,Q,+BCGRO,EAAMC,gBAAK,kBAAMpB,aAAM,kBAAM,oCAC7BqB,EAAcC,SAASC,eAAe,QACtCC,EAAO,kBACTC,iBACI,cAAC,WAAD,CAAUC,SAAU,wBAApB,SACI,cAAC,IAAD,UACI,cAAC,aAAD,UACI,cAACP,EAAD,UAIZE,IAIGM,OAAOC,qBAAuBD,OAAOE,qBAgB5CL,IAbe,SAACM,EAAKC,GACrB,IAAMC,EAAKV,SAASW,cAAc,UAClCD,EAAGF,IAAMA,EACTE,EAAGE,OAAS,WACRH,KAEJC,EAAGG,QAAU,WACTJ,EAAK,IAAIK,MAAM,yBAA2BN,KAE9CR,SAASe,KAAKC,YAAYN,GAM1BO,CACI,4GACAf,GAMRb,M","file":"static/js/main.e0786a57.chunk.js","sourcesContent":["export function retry(fn, retriesLeft = 5, interval = 1000) {\n    return new Promise((resolve, reject) => {\n        fn()\n            .then(resolve)\n            .catch((error) => {\n                setTimeout(() => {\n                    if (retriesLeft === 1) {\n                        // reject('maximum retries exceeded');\n                        reject(error);\n                        return;\n                    }\n                    // Passing on \"reject\" is the important part\n                    retry(fn, retriesLeft - 1, interval).then(resolve, reject);\n                }, interval);\n            });\n    });\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Suspense, lazy, StrictMode } from \"react\";\nimport { retry } from \"./utils/commonFunctions\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\nconst App = lazy(() => retry(() => import(\"./App\")));\nconst rootElement = document.getElementById(\"root\");\nconst main = () =>\n    render(\n        <Suspense fallback={<div />}>\n            <Router>\n                <StrictMode>\n                    <App />\n                </StrictMode>\n            </Router>\n        </Suspense>,\n        rootElement\n);\n\nconst browserSupportsAllFeatures = () => {\n    return window.requestIdleCallback && window.IntersectionObserver;\n};\n\nconst loadScript = (src, done) => {\n    const js = document.createElement(\"script\");\n    js.src = src;\n    js.onload = function () {\n        done();\n    };\n    js.onerror = function () {\n        done(new Error(\"Failed to load script \" + src));\n    };\n    document.head.appendChild(js);\n};\n\nif (browserSupportsAllFeatures()) {\n    main();\n} else {\n    loadScript(\n        \"https://polyfill.io/v3/polyfill.min.js?version=3.52.1&features=requestIdleCallback%2CIntersectionObserver\",\n        main\n    );\n}\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}